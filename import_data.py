# import_data.py
import os
import sys
import django
import json
import csv
from datetime import datetime, date
from django.db.models import Avg  # Ê∑ªÂä†AvgÂ∞éÂÖ•

# Ë®≠ÁΩÆDjangoÁí∞Â¢É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
django.setup()

from myapp.models import Author, Category, Book

class DataImporter:
    def __init__(self):
        self.raw_data = []
        self.cleaned_data = {
            'authors': [],
            'categories': [],
            'books': []
        }
    
    def load_raw_data(self, json_file_path='sample_data.json'):
        """ÂæûJSONÊ™îÊ°àËºâÂÖ•ÂéüÂßãË≥áÊñô"""
        import json
        
        try:
            # ÂòóË©¶ÂæûJSONÊ™îÊ°àËÆÄÂèñË≥áÊñô
            with open(json_file_path, 'r', encoding='utf-8') as file:
                json_data = json.load(file)
            
            # Â∞áJSONË≥áÊñôËΩâÊèõÁÇ∫Âéü‰æÜÁöÑÊ†ºÂºè
            self.raw_data = []
            
            # ËΩâÊèõ‰ΩúËÄÖË≥áÊñô
            for author in json_data.get('authors', []):
                self.raw_data.append({
                    'type': 'author',
                    'name': author['name'],
                    'email': author['email'],
                    'birth_date': author['birth_date']
                })
            
            # ËΩâÊèõÂàÜÈ°ûË≥áÊñô
            for category in json_data.get('categories', []):
                self.raw_data.append({
                    'type': 'category', 
                    'name': category['name'],
                    'description': category.get('description', '')
                })
            
            # ËΩâÊèõÊõ∏Á±çË≥áÊñô
            for book in json_data.get('books', []):
                self.raw_data.append({
                    'type': 'book',
                    'title': book['title'],
                    'author_name': book['author_name'],
                    'category_name': book['category_name'],
                    'publish_date': book['publish_date'],
                    'price': str(book['price'])  # Á¢∫‰øùÊòØÂ≠ó‰∏≤Ê†ºÂºè
                })
            
            print(f"‚úÖ Âæû {json_file_path} ÊàêÂäüËºâÂÖ• {len(self.raw_data)} Á≠ÜÂéüÂßãË≥áÊñô")
            print(f"   - ‰ΩúËÄÖ: {len(json_data.get('authors', []))} Á≠Ü")
            print(f"   - ÂàÜÈ°û: {len(json_data.get('categories', []))} Á≠Ü") 
            print(f"   - Êõ∏Á±ç: {len(json_data.get('books', []))} Á≠Ü")
            
        except FileNotFoundError:
            print(f"‚ùå Êâæ‰∏çÂà∞JSONÊ™îÊ°à: {json_file_path}")
            print("‰ΩøÁî®È†êË®≠ÁöÑÁØÑ‰æãË≥áÊñô...")
            self._load_default_data()
        except json.JSONDecodeError as e:
            print(f"‚ùå JSONÊ™îÊ°àÊ†ºÂºèÈåØË™§: {e}")
            print("‰ΩøÁî®È†êË®≠ÁöÑÁØÑ‰æãË≥áÊñô...")
            self._load_default_data()
        except Exception as e:
            print(f"‚ùå ËÆÄÂèñJSONÊ™îÊ°àÊôÇÁôºÁîüÈåØË™§: {e}")
            print("‰ΩøÁî®È†êË®≠ÁöÑÁØÑ‰æãË≥áÊñô...")
            self._load_default_data()
    
    def _load_default_data(self):
        """ËºâÂÖ•È†êË®≠ÁöÑÁØÑ‰æãË≥áÊñôÔºàÂÇôÁî®Ôºâ"""
        self.raw_data = [
            # Âü∫Êú¨ÁØÑ‰æãË≥áÊñôÔºåÁ¢∫‰øùÁ®ãÂºèËÉΩÈÅãË°å
            {'type': 'author', 'name': 'Âºµ‰∏â', 'email': 'zhangsan@email.com', 'birth_date': '1980-05-15'},
            {'type': 'author', 'name': 'ÊùéÂõõ', 'email': 'lisi@email.com', 'birth_date': '1975-12-01'},
            {'type': 'category', 'name': 'ÁßëÊäÄ', 'description': 'ÊäÄË°ìÁõ∏ÈóúÊõ∏Á±ç'},
            {'type': 'book', 'title': 'PythonÂÖ•ÈñÄ', 'author_name': 'Âºµ‰∏â', 'category_name': 'ÁßëÊäÄ', 'publish_date': '2023-01-15', 'price': '350.00'},
        ]
        print(f"ËºâÂÖ• {len(self.raw_data)} Á≠ÜÈ†êË®≠Ë≥áÊñô")
    
    def clean_data(self):
        """Ê∏ÖÁêÜÂíåÊ†ºÂºèÂåñË≥áÊñô"""
        print("ÈñãÂßãÊ∏ÖÁêÜË≥áÊñô...")
        
        for item in self.raw_data:
            try:
                if item['type'] == 'author':
                    # Ê∏ÖÁêÜ‰ΩúËÄÖË≥áÊñô
                    cleaned_item = {
                        'name': item['name'].strip(),  # ÂéªÈô§ÂâçÂæåÁ©∫Ê†º
                        'email': item['email'].strip().lower(),  # ËΩâÂ∞èÂØ´
                        'birth_date': datetime.strptime(item['birth_date'], '%Y-%m-%d').date() if item['birth_date'] else None
                    }
                    self.cleaned_data['authors'].append(cleaned_item)
                    
                elif item['type'] == 'category':
                    # Ê∏ÖÁêÜÂàÜÈ°ûË≥áÊñô
                    cleaned_item = {
                        'name': item['name'].strip(),
                        'description': item.get('description', '').strip()
                    }
                    self.cleaned_data['categories'].append(cleaned_item)
                    
                elif item['type'] == 'book':
                    # Ê∏ÖÁêÜÊõ∏Á±çË≥áÊñô
                    cleaned_item = {
                        'title': item['title'].strip(),
                        'author_name': item['author_name'].strip(),
                        'category_name': item['category_name'].strip(),
                        'publish_date': datetime.strptime(item['publish_date'], '%Y-%m-%d').date(),
                        'price': float(item['price'])
                    }
                    self.cleaned_data['books'].append(cleaned_item)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è Ê∏ÖÁêÜË≥áÊñôÊôÇÁôºÁîüÈåØË™§ (Ë∑≥ÈÅéÊ≠§Á≠Ü): {item} - ÈåØË™§: {e}")
                continue
        
        print(f"‚úÖ Ê∏ÖÁêÜÂÆåÊàê: {len(self.cleaned_data['authors'])} ‰ΩúËÄÖ, {len(self.cleaned_data['categories'])} ÂàÜÈ°û, {len(self.cleaned_data['books'])} Êõ∏Á±ç")
    
    def import_to_django(self):
        """ÂåØÂÖ•Ë≥áÊñôÂà∞DjangoË≥áÊñôÂ∫´"""
        print("ÈñãÂßãÂåØÂÖ•Ë≥áÊñôÂà∞Django...")
        
        # Âª∫Á´ã‰ΩúËÄÖ
        author_map = {}
        for author_data in self.cleaned_data['authors']:
            try:
                author, created = Author.objects.get_or_create(
                    name=author_data['name'],
                    defaults={
                        'email': author_data['email'],
                        'birth_date': author_data['birth_date']
                    }
                )
                author_map[author_data['name']] = author
                print(f"{'‚úÖ Âª∫Á´ã' if created else '‚ÑπÔ∏è ÊâæÂà∞'}‰ΩúËÄÖ: {author.name}")
            except Exception as e:
                print(f"‚ùå Âª∫Á´ã‰ΩúËÄÖÂ§±Êïó {author_data['name']}: {e}")
        
        # Âª∫Á´ãÂàÜÈ°û
        category_map = {}
        for category_data in self.cleaned_data['categories']:
            try:
                category, created = Category.objects.get_or_create(
                    name=category_data['name'],
                    defaults={'description': category_data['description']}
                )
                category_map[category_data['name']] = category
                print(f"{'‚úÖ Âª∫Á´ã' if created else '‚ÑπÔ∏è ÊâæÂà∞'}ÂàÜÈ°û: {category.name}")
            except Exception as e:
                print(f"‚ùå Âª∫Á´ãÂàÜÈ°ûÂ§±Êïó {category_data['name']}: {e}")
        
        # Âª∫Á´ãÊõ∏Á±ç
        book_count = 0
        for book_data in self.cleaned_data['books']:
            try:
                author = author_map.get(book_data['author_name'])
                category = category_map.get(book_data['category_name'])
                
                if author and category:
                    book, created = Book.objects.get_or_create(
                        title=book_data['title'],
                        defaults={
                            'author': author,
                            'category': category,
                            'publish_date': book_data['publish_date'],
                            'price': book_data['price']
                        }
                    )
                    if created:
                        book_count += 1
                        print(f"‚úÖ Âª∫Á´ãÊõ∏Á±ç: {book.title}")
                    else:
                        print(f"‚ÑπÔ∏è Êõ∏Á±çÂ∑≤Â≠òÂú®: {book.title}")
                else:
                    print(f"‚ùå Ë≠¶Âëä: Êâæ‰∏çÂà∞‰ΩúËÄÖ '{book_data['author_name']}' ÊàñÂàÜÈ°û '{book_data['category_name']}' - Êõ∏Á±ç: {book_data['title']}")
                    
            except Exception as e:
                print(f"‚ùå ÈåØË™§Âª∫Á´ãÊõ∏Á±ç {book_data['title']}: {e}")
        
        print(f"üéâ ÊàêÂäüÂª∫Á´ã {book_count} Êú¨Êñ∞Êõ∏Á±ç")
    
    def export_data(self, formats=['json', 'csv', 'report']):
        """Â§öÂäüËÉΩË≥áÊñôÂåØÂá∫"""
        base_filename = f"data_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        print(f"ÈñãÂßãÂåØÂá∫Ë≥áÊñô ({', '.join(formats)})...")
        
        results = {}
        
        if 'json' in formats:
            results['json'] = self.export_to_json(f"{base_filename}.json")
        
        if 'csv' in formats:
            results['csv'] = self.export_to_csv(base_filename)
        
        if 'report' in formats:
            results['report'] = self.create_export_report(base_filename)
        
        # È°ØÁ§∫ÁµêÊûú
        success_count = sum(1 for r in results.values() if r)
        print(f"\nÂåØÂá∫ÂÆåÊàê: {success_count}/{len(results)} Á®ÆÊ†ºÂºèÊàêÂäü")
        
        return success_count > 0

    def export_to_json(self, filename):
        """ÂåØÂá∫ÁÇ∫JSONÊ†ºÂºè"""
        try:
            export_data = {
                'metadata': {
                    'export_time': datetime.now().isoformat(),
                    'total_records': {
                        'authors': Author.objects.count(),
                        'categories': Category.objects.count(),
                        'books': Book.objects.count()
                    }
                },
                'authors': list(Author.objects.values(
                    'id', 'name', 'email', 'birth_date'
                )),
                'categories': list(Category.objects.values(
                    'id', 'name', 'description'
                )),
                'books': list(Book.objects.values(
                    'id', 'title', 'author_id', 'category_id', 
                    'publish_date', 'price', 'is_available'
                ))
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2, default=str)
            
            print(f"‚úÖ JSONÂåØÂá∫ÂÆåÊàê: {filename}")
            return True
            
        except Exception as e:
            print(f"‚ùå JSONÂåØÂá∫Â§±Êïó: {e}")
            return False

    def export_to_csv(self, base_filename):
        """ÂåØÂá∫ÁÇ∫CSVÊ†ºÂºè"""
        try:
            # ‰ΩúËÄÖCSV
            authors = Author.objects.all()
            with open(f'{base_filename}_authors.csv', 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(['ID', 'ÂßìÂêç', 'ÈõªÂ≠êÈÉµ‰ª∂', 'Âá∫ÁîüÊó•Êúü'])
                for author in authors:
                    writer.writerow([
                        author.id,
                        author.name,
                        author.email,
                        author.birth_date.strftime('%Y-%m-%d') if author.birth_date else ''
                    ])
            
            # ÂàÜÈ°ûCSV
            categories = Category.objects.all()
            with open(f'{base_filename}_categories.csv', 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(['ID', 'ÂàÜÈ°ûÂêçÁ®±', 'ÊèèËø∞'])
                for category in categories:
                    writer.writerow([
                        category.id,
                        category.name,
                        category.description
                    ])
            
            # Êõ∏Á±çCSVÔºàÂåÖÂê´ÈóúËÅØË≥áË®äÔºâ
            books = Book.objects.select_related('author', 'category').all()
            with open(f'{base_filename}_books.csv', 'w', newline='', encoding='utf-8-sig') as f:
                writer = csv.writer(f)
                writer.writerow(['ID', 'Êõ∏Âêç', '‰ΩúËÄÖID', '‰ΩúËÄÖ', 'ÂàÜÈ°ûID', 'ÂàÜÈ°û', 'Âá∫ÁâàÊó•Êúü', 'ÂÉπÊ†º', 'ÊòØÂê¶ÂèØÂÄü'])
                for book in books:
                    writer.writerow([
                        book.id,
                        book.title,
                        book.author.id,
                        book.author.name,
                        book.category.id,
                        book.category.name,
                        book.publish_date.strftime('%Y-%m-%d'),
                        float(book.price),
                        'ÊòØ' if book.is_available else 'Âê¶'
                    ])
            
            print(f"‚úÖ CSVÂåØÂá∫ÂÆåÊàê: {base_filename}_*.csv")
            return True
            
        except Exception as e:
            print(f"‚ùå CSVÂåØÂá∫Â§±Êïó: {e}")
            return False

    def create_export_report(self, base_filename):
        """Âª∫Á´ãË©≥Á¥∞ÁöÑÂåØÂá∫Â†±Âëä"""
        try:
            authors = Author.objects.all()
            categories = Category.objects.all()
            books = Book.objects.all()
            
            report = f"""
Ë≥áÊñôÂåØÂá∫Ë©≥Á¥∞Â†±Âëä
================

Âü∫Êú¨Ë≥áË®ä:
---------
ÂåØÂá∫ÊôÇÈñì: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ÂåØÂá∫Ê™îÊ°àÂü∫Á§éÂêçÁ®±: {base_filename}

Ë≥áÊñôÁµ±Ë®à:
---------
‰ΩúËÄÖÊï∏Èáè: {authors.count()}
ÂàÜÈ°ûÊï∏Èáè: {categories.count()}  
Êõ∏Á±çÊï∏Èáè: {books.count()}
Á∏ΩË®òÈåÑÊï∏: {authors.count() + categories.count() + books.count()}

‰ΩúËÄÖÂàóË°®:
---------
"""
            for author in authors:
                book_count = Book.objects.filter(author=author).count()
                report += f"- {author.name} ({author.email}) - Ëëó‰Ωú: {book_count}Êú¨\n"
            
            report += f"""
ÂàÜÈ°ûÂàóË°®:
---------
"""
            for category in categories:
                book_count = Book.objects.filter(category=category).count()
                report += f"- {category.name} - Êõ∏Á±ç: {book_count}Êú¨\n"
                if category.description:
                    report += f"  ÊèèËø∞: {category.description}\n"
            
            report += f"""
Êõ∏Á±çÂÉπÊ†ºÁµ±Ë®à:
------------
"""
            if books.exists():
                highest_price_book = books.order_by('-price').first()
                lowest_price_book = books.order_by('price').first()
                avg_price = books.aggregate(avg_price=Avg('price'))['avg_price']
                report += f"""ÊúÄÈ´òÂÉπÊ†º: {highest_price_book.price} ({highest_price_book.title})
ÊúÄ‰ΩéÂÉπÊ†º: {lowest_price_book.price} ({lowest_price_book.title})
Âπ≥ÂùáÂÉπÊ†º: {avg_price:.2f}
"""
            else:
                report += "ÁÑ°Êõ∏Á±çË≥áÊñô\n"
            
            report += f"""
ÂåØÂá∫Ê™îÊ°à:
---------
1. {base_filename}.json - JSONÊ†ºÂºèÂÆåÊï¥Ë≥áÊñô
2. {base_filename}_authors.csv - ‰ΩúËÄÖË≥áÊñôË°®
3. {base_filename}_categories.csv - ÂàÜÈ°ûË≥áÊñôË°®
4. {base_filename}_books.csv - Êõ∏Á±çË≥áÊñôË°®
5. {base_filename}_report.txt - Êú¨Â†±ÂëäÊ™îÊ°à

Ê≥®ÊÑè‰∫ãÈ†Ö:
---------
- ÊâÄÊúâÊ™îÊ°à‰ΩøÁî®UTF-8Á∑®Á¢º
- CSVÊ™îÊ°àÈÅ©ÂêàÁî®ExcelÈñãÂïüÁ∑®ËºØ
- JSONÊ™îÊ°àÂåÖÂê´ÂÆåÊï¥ÁöÑË≥áÊñôÈóú‰øÇ
- Âª∫Ë≠∞ÂÆöÊúüÂÇô‰ªΩÈáçË¶ÅË≥áÊñô
"""
            
            with open(f'{base_filename}_report.txt', 'w', encoding='utf-8') as f:
                f.write(report)
            
            print(f"‚úÖ ÂåØÂá∫Â†±ÂëäÁîüÊàêÂÆåÊàê: {base_filename}_report.txt")
            return True
            
        except Exception as e:
            print(f"‚ùå Â†±ÂëäÁîüÊàêÂ§±Êïó: {e}")
            return False
    
    def check_data_in_admin(self):
        """Ê™¢Êü•Ë≥áÊñôÊòØÂê¶ÂèØ‰ª•Âú®ÁÆ°ÁêÜÈù¢ÊùøÊü•Áúã"""
        total_authors = Author.objects.count()
        total_categories = Category.objects.count()
        total_books = Book.objects.count()
        
        print("\n=== Ë≥áÊñôÁµ±Ë®à ===")
        print(f"‰ΩúËÄÖÊï∏Èáè: {total_authors}")
        print(f"ÂàÜÈ°ûÊï∏Èáè: {total_categories}")
        print(f"Êõ∏Á±çÊï∏Èáè: {total_books}")
        print(f"Á∏ΩË®òÈåÑÊï∏: {total_authors + total_categories + total_books}")
        
        if total_books >= 20:
            print("‚úÖ Â∑≤ÈÅîÂà∞Ëá≥Â∞ë20Á≠ÜÊõ∏Á±çË®òÈåÑÁöÑË¶ÅÊ±Ç!")
        else:
            print("‚ùå Â∞öÊú™ÈÅîÂà∞20Á≠ÜÊõ∏Á±çË®òÈåÑË¶ÅÊ±Ç")
        
        print("\nË¶ÅÊ™¢Êü•ÁÆ°ÁêÜÈù¢ÊùøÔºåË´ãÂü∑Ë°å:")
        print("1. python manage.py createsuperuser")
        print("2. python manage.py runserver")
        print("3. ÁÄèË¶Ω http://localhost:8000/admin")

def main():
    """‰∏ªÂü∑Ë°åÂáΩÊï∏"""
    importer = DataImporter()
    
    try:
        # a) ÂæûJSONÊ™îÊ°àËºâÂÖ•ÂéüÂßãË≥áÊñô
        importer.load_raw_data('sample_data.json')
        
        # b) Ê∏ÖÁêÜÂíåÊ†ºÂºèÂåñË≥áÊñôÈõÜ
        importer.clean_data()
        
        # c) ÂåØÂÖ•Âà∞DjangoË≥áÊñôÂ∫´
        importer.import_to_django()
        
        # c) Â§öÂäüËÉΩÂåØÂá∫Ë≥áÊñô
        print("\n" + "="*50)
        print("ÈñãÂßãÂåØÂá∫Ë≥áÊñô...")
        importer.export_data(formats=['json', 'csv', 'report'])
        
        # d) Ê™¢Êü•ÁµêÊûú
        importer.check_data_in_admin()
        
    except Exception as e:
        print(f"‚ùå Âü∑Ë°åÈåØË™§: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    print("üéâ ÊâÄÊúâÊìç‰ΩúÂÆåÊàêÔºÅ")
    return 0

if __name__ == "__main__":
    exit(main())